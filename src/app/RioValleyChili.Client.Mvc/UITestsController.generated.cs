// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace RioValleyChili.Client.Mvc.Controllers
{
    public partial class UITestsController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UITestsController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UITestsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UITestsController Actions { get { return MVC.UITests; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "UITests";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "UITests";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string LotsTests = "LotsTests";
            public readonly string LotInventoryTests = "LotInventoryTests";
            public readonly string LabResultsTests = "LabResultsTests";
            public readonly string LotHoldTests = "LotHoldTests";
            public readonly string PackSheduleTests = "PackSheduleTests";
            public readonly string ProductionBatchTests = "ProductionBatchTests";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string LotsTests = "LotsTests";
            public const string LotInventoryTests = "LotInventoryTests";
            public const string LabResultsTests = "LabResultsTests";
            public const string LotHoldTests = "LotHoldTests";
            public const string PackSheduleTests = "PackSheduleTests";
            public const string ProductionBatchTests = "ProductionBatchTests";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _UITestsLayout = "_UITestsLayout";
                public readonly string _UITestsLayoutAMD = "_UITestsLayoutAMD";
                public readonly string Index = "Index";
                public readonly string LabResultsTests = "LabResultsTests";
                public readonly string LotHoldTests = "LotHoldTests";
                public readonly string LotInventoryTests = "LotInventoryTests";
                public readonly string LotsTests = "LotsTests";
                public readonly string PackSheduleTests = "PackSheduleTests";
                public readonly string ProductionBatchTests = "ProductionBatchTests";
            }
            public readonly string _UITestsLayout = "~/Views/UITests/_UITestsLayout.cshtml";
            public readonly string _UITestsLayoutAMD = "~/Views/UITests/_UITestsLayoutAMD.cshtml";
            public readonly string Index = "~/Views/UITests/Index.cshtml";
            public readonly string LabResultsTests = "~/Views/UITests/LabResultsTests.cshtml";
            public readonly string LotHoldTests = "~/Views/UITests/LotHoldTests.cshtml";
            public readonly string LotInventoryTests = "~/Views/UITests/LotInventoryTests.cshtml";
            public readonly string LotsTests = "~/Views/UITests/LotsTests.cshtml";
            public readonly string PackSheduleTests = "~/Views/UITests/PackSheduleTests.cshtml";
            public readonly string ProductionBatchTests = "~/Views/UITests/ProductionBatchTests.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UITestsController : RioValleyChili.Client.Mvc.Controllers.UITestsController
    {
        public T4MVC_UITestsController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LotsTestsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LotsTests()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LotsTests);
            LotsTestsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LotInventoryTestsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LotInventoryTests()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LotInventoryTests);
            LotInventoryTestsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LabResultsTestsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LabResultsTests()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LabResultsTests);
            LabResultsTestsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LotHoldTestsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LotHoldTests()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LotHoldTests);
            LotHoldTestsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void PackSheduleTestsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult PackSheduleTests()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PackSheduleTests);
            PackSheduleTestsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ProductionBatchTestsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProductionBatchTests()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProductionBatchTests);
            ProductionBatchTestsOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
