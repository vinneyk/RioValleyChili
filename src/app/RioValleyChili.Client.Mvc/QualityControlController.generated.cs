// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace RioValleyChili.Client.Mvc.Controllers
{
    public partial class QualityControlController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public QualityControlController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected QualityControlController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CustomerSpecs()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CustomerSpecs);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public QualityControlController Actions { get { return MVC.QualityControl; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "QualityControl";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "QualityControl";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string LabResults = "LabResults";
            public readonly string CustomerSpecs = "CustomerSpecs";
            public readonly string ProductSpecs = "ProductSpecs";
            public readonly string ProductMaintenance = "ProductMaintenance";
            public readonly string SampleMatching = "SampleMatching";
            public readonly string LotTrace = "LotTrace";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string LabResults = "LabResults";
            public const string CustomerSpecs = "CustomerSpecs";
            public const string ProductSpecs = "ProductSpecs";
            public const string ProductMaintenance = "ProductMaintenance";
            public const string SampleMatching = "SampleMatching";
            public const string LotTrace = "LotTrace";
        }


        static readonly ActionParamsClass_CustomerSpecs s_params_CustomerSpecs = new ActionParamsClass_CustomerSpecs();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CustomerSpecs CustomerSpecsParams { get { return s_params_CustomerSpecs; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CustomerSpecs
        {
            public readonly string customerKey = "customerKey";
            public readonly string productKey = "productKey";
        }
        static readonly ActionParamsClass_ProductSpecs s_params_ProductSpecs = new ActionParamsClass_ProductSpecs();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProductSpecs ProductSpecsParams { get { return s_params_ProductSpecs; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProductSpecs
        {
            public readonly string productKey = "productKey";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string CustomerSpecs = "CustomerSpecs";
                public readonly string Index = "Index";
                public readonly string LabResults = "LabResults";
                public readonly string LotTrace = "LotTrace";
                public readonly string ProductMaintenance = "ProductMaintenance";
                public readonly string ProductSpecs = "ProductSpecs";
                public readonly string SampleMatching = "SampleMatching";
            }
            public readonly string CustomerSpecs = "~/Views/QualityControl/CustomerSpecs.cshtml";
            public readonly string Index = "~/Views/QualityControl/Index.cshtml";
            public readonly string LabResults = "~/Views/QualityControl/LabResults.cshtml";
            public readonly string LotTrace = "~/Views/QualityControl/LotTrace.cshtml";
            public readonly string ProductMaintenance = "~/Views/QualityControl/ProductMaintenance.cshtml";
            public readonly string ProductSpecs = "~/Views/QualityControl/ProductSpecs.cshtml";
            public readonly string SampleMatching = "~/Views/QualityControl/SampleMatching.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_QualityControlController : RioValleyChili.Client.Mvc.Controllers.QualityControlController
    {
        public T4MVC_QualityControlController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LabResultsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LabResults()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LabResults);
            LabResultsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CustomerSpecsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string customerKey, string productKey);

        [NonAction]
        public override System.Web.Mvc.ActionResult CustomerSpecs(string customerKey, string productKey)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CustomerSpecs);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "customerKey", customerKey);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "productKey", productKey);
            CustomerSpecsOverride(callInfo, customerKey, productKey);
            return callInfo;
        }

        [NonAction]
        partial void ProductSpecsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string productKey);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProductSpecs(string productKey)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProductSpecs);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "productKey", productKey);
            ProductSpecsOverride(callInfo, productKey);
            return callInfo;
        }

        [NonAction]
        partial void ProductMaintenanceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProductMaintenance()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProductMaintenance);
            ProductMaintenanceOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SampleMatchingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult SampleMatching()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SampleMatching);
            SampleMatchingOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LotTraceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LotTrace()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LotTrace);
            LotTraceOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
