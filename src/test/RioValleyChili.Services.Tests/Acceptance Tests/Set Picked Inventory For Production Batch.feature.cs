// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RioValleyChili.Services.Tests.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Set Picked Inventory For Production Batch")]
    public partial class SetPickedInventoryForProductionBatchFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Set Picked Inventory For Production Batch.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Set Picked Inventory For Production Batch", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inventory in an invalid quality state cannot be picked")]
        public virtual void InventoryInAnInvalidQualityStateCannotBePicked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inventory in an invalid quality state cannot be picked", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("a production batch that has not been produced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Quality State",
                        "Hold",
                        "Location"});
            table1.AddRow(new string[] {
                        "Pending",
                        "none",
                        "unlocked"});
            table1.AddRow(new string[] {
                        "Contaminated",
                        "none",
                        "unlocked"});
            table1.AddRow(new string[] {
                        "Rejected",
                        "none",
                        "unlocked"});
            table1.AddRow(new string[] {
                        "Released",
                        "hold",
                        "unlocked"});
            table1.AddRow(new string[] {
                        "Released",
                        "none",
                        "locked"});
#line 5
 testRunner.And("inventory from a lot in any of the following states", ((string)(null)), table1, "And ");
#line 12
 testRunner.When("I attempt to pick any of the above inventory for the batch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the service method returns an invalid result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Production Batch that has been produced cannot have its Picked Inventory modified" +
            "")]
        public virtual void ProductionBatchThatHasBeenProducedCannotHaveItsPickedInventoryModified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Production Batch that has been produced cannot have its Picked Inventory modified" +
                    "", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("a production batch that has been produced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.When("I set picked inventory for the production batch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the service method returns an invalid result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Picking inventory for a production batch will set resulting lot attributes to the" +
            " weighted average values of the items picked")]
        public virtual void PickingInventoryForAProductionBatchWillSetResultingLotAttributesToTheWeightedAverageValuesOfTheItemsPicked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Picking inventory for a production batch will set resulting lot attributes to the" +
                    " weighted average values of the items picked", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("a production batch that has not been produced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Quantity",
                        "Packaging Weight",
                        "AIA",
                        "Ash",
                        "AToxin"});
            table2.AddRow(new string[] {
                        "4",
                        "100",
                        "80",
                        "50",
                        "60"});
            table2.AddRow(new string[] {
                        "1",
                        "200",
                        "",
                        "75",
                        "44"});
            table2.AddRow(new string[] {
                        "5",
                        "25",
                        "100",
                        "",
                        "70"});
#line 22
 testRunner.And("inventory with the following attributes", ((string)(null)), table2, "And ");
#line 27
 testRunner.When("I pick the above inventory for the batch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AIA",
                        "Ash",
                        "AToxin"});
            table3.AddRow(new string[] {
                        "61.38",
                        "48.28",
                        "57.31"});
#line 28
 testRunner.Then("the batch\'s resulting lot will have its attribute values set to", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
